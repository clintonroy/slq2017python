#+LATEX_HEADER: \usepackage{ccicons}

#+TITLE: Introduction to Programming with Python
#+AUTHOR: Clinton Roy
#+EMAIL: clinton.roy@gmail.com
#+LaTeX_HEADER: \institute[slqedge]{The Edge, State Library of Queensland}



#+OPTIONS: H:2


* Introduction

** Introduction to this Class
 * Take away skills:
  * Fundamental knowledge of:
   * all programming languages
   *  of the Python language
   * of the Python ecosystem
 * Tried to use non-technical language
 * Instant gratification, use the interpreter
 * Self directed, internal motivation

** Notes on these Notes
 :PROPERTIES:
 :COPYING:  t
 :END:

 * Latest version: https://github.com/clintonroy/slq2017python\\

 * Copyright \copy \the\year\_ Clinton Roy

 * This work is licensed under a Creative Commons Attribution 4.0 International License. \ccby

** Introduction to Myself
 * I've:
  * Used Python for twenty mumble years
  * Run the local user group for years
  * Run the Australian Python conference in Brisbane twice, helped out
    in other cities
  * Help out at many Open Source and Open Data events:
   * Health Hack, Library Hack, Gov Hack


* Fundamentals of Python
** Design Goals of Python
 * Takes care of a lot of details for you
 * To be fast and easy to learn
 * Low cognitive load, lets you work on your problem
 * Does not lock things down
 * Minimise eye strain


** Fundamentals Python Concepts
 * Everything is an object
  * An object is data and related methods
 * Some objects change, some objects don't
 * Easy to use data structures


** Python Details
 * Professional programming language used all over the world in many
   industries
 * It's Open Source, your skills are portable.
 * There are lots of implementations of Python, we're only looking at
   one, but 99% of today is useful to all
 * Comes with Linux. Older versions come bundled with Apple. Easyish to install on Windows.

* Fundamental Programming Concepts
** Fundamental Programming Concepts
 * Computers run a lot of tiny steps very quickly.
  * Move this bit of memory into the cpu
  * Move this other bit of memory into the CPU
  * Add these two numbers in the CPU
  * Put the result back into memory

 * Most programming comes down to organising steps:
  1. Doing one step after another
  2. Repeating steps
  3. Choosing between two steps
  4. Grouping steps
 * Variables and assignment



* Stepping Stones
** Example steps
 * assignment
#+BEGIN_SRC
> angle = 30
#+END_SRC
 * function calls
#+BEGIN_SRC
> min(10, 3)
#+END_SRC
 * method calls
#+BEGIN_SRC
> pancake.flip()
#+END_SRC
 * maths
#+BEGIN_SRC
> 10 + 3.4
#+END_SRC


** Grouping of Steps
 * functions
#+BEGIN_SRC
> def exicted(message):
>     print(message + "!!!")
#+END_SRC

 * classes
#+BEGIN_SRC
> class Pancake:
>     def flip(self):
>        self.flipped = True
#+END_SRC

 * files
 * libraries

* Data Structures

** Python Data Structures
 * atoms: numbers, numbers
 * molecules: tuples, lists, dictionaries
 * mutable or immutable

** Numbers
 * Immutable
 * Whole numbers, floating point
#+BEGIN_SRC python
> 123
> 3.14
#+END_SRC
 * For more fun, Decimal and Fraction

** Strings
 * Immutable
 * Letters in between quotes
#+BEGIN_SRC python
> 'letters in between single quotes'
> "letters in between double quotes"
> """letters in between triple quotes"""
#+END_SRC

** Tuples
 * Immutable

** Lists
 * Mutable

** Dictionaries




* Resources
** Resources
 * Python.org
 * Books
  * Automate the Boring Stuff with Python \ccbyncsa{}
    https://automatetheboringstuff.com
 * Users Group
   * Brisbane Python Users Group
   * Humbug
 * Conferences
  * PyCon Au, PyCon NZ
  * Videos on Youtube
 * Software Carpentry groups at UQ, QUT, Griffith
 * Podcasts
  * From Python import podcast
  * Podcast.__init__
  * Python Bytes
  * Talk Python to Me
